module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield   
  ) {
  
  
  alu alu;
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      multi_seven_seg seg;
          
      fsm state = {IDLE, ADD1, FAIL};
    
    }
  }
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    led = c{3b0, io_button};  // connect buttons to LEDs
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    
    seg.values = {4h0,4h0,4h0,4h0}; // display 0000 on screen
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
    
    // assign DIP switches to control a, b and alufn values
    alu.alufn = io_dip[0][5:0]; 
    alu.a = io_dip[2]; 
    alu.b = io_dip[1]; 
    
    // assign LEDs to display a, b and ALU output values
    io_led[2] = io_dip[2]; 
    io_led[1] = io_dip[1]; 
    io_led[0] = alu.outalu;  
    
    case (state.q) {
      state.IDLE:
        if (io_button[1]){
            state.d = state.ADD1; 
        }
      // error state  
      state.ADD1:
        io_led[0] = alu.outalu + 1; // add 1 to correct ALU output value
        state.d = state.FAIL;
      state.FAIL:
        seg.values = {4ha,4hb,4hc,4hd}; // display FAIL 
        io_led[0] = alu.outalu + 1; // LEDs display error output value
    }    
  }
} 
